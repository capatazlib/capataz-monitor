// This file is generated by rust-protobuf 2.8.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `proto/hello.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_8_0;

#[derive(PartialEq,Clone,Default)]
pub struct Greeting {
    // message fields
    pub person: ::std::string::String,
    pub language: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Greeting {
    fn default() -> &'a Greeting {
        <Greeting as ::protobuf::Message>::default_instance()
    }
}

impl Greeting {
    pub fn new() -> Greeting {
        ::std::default::Default::default()
    }

    // string person = 1;


    pub fn get_person(&self) -> &str {
        &self.person
    }
    pub fn clear_person(&mut self) {
        self.person.clear();
    }

    // Param is passed by value, moved
    pub fn set_person(&mut self, v: ::std::string::String) {
        self.person = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_person(&mut self) -> &mut ::std::string::String {
        &mut self.person
    }

    // Take field
    pub fn take_person(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.person, ::std::string::String::new())
    }

    // string language = 2;


    pub fn get_language(&self) -> &str {
        &self.language
    }
    pub fn clear_language(&mut self) {
        self.language.clear();
    }

    // Param is passed by value, moved
    pub fn set_language(&mut self, v: ::std::string::String) {
        self.language = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_language(&mut self) -> &mut ::std::string::String {
        &mut self.language
    }

    // Take field
    pub fn take_language(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.language, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Greeting {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.person)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.language)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.person.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.person);
        }
        if !self.language.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.language);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.person.is_empty() {
            os.write_string(1, &self.person)?;
        }
        if !self.language.is_empty() {
            os.write_string(2, &self.language)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Greeting {
        Greeting::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "person",
                    |m: &Greeting| { &m.person },
                    |m: &mut Greeting| { &mut m.person },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "language",
                    |m: &Greeting| { &m.language },
                    |m: &mut Greeting| { &mut m.language },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Greeting>(
                    "Greeting",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Greeting {
        static mut instance: ::protobuf::lazy::Lazy<Greeting> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Greeting,
        };
        unsafe {
            instance.get(Greeting::new)
        }
    }
}

impl ::protobuf::Clear for Greeting {
    fn clear(&mut self) {
        self.person.clear();
        self.language.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Greeting {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Greeting {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GreetingList {
    // message fields
    pub greetings: ::protobuf::RepeatedField<Greeting>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GreetingList {
    fn default() -> &'a GreetingList {
        <GreetingList as ::protobuf::Message>::default_instance()
    }
}

impl GreetingList {
    pub fn new() -> GreetingList {
        ::std::default::Default::default()
    }

    // repeated .Greeting greetings = 1;


    pub fn get_greetings(&self) -> &[Greeting] {
        &self.greetings
    }
    pub fn clear_greetings(&mut self) {
        self.greetings.clear();
    }

    // Param is passed by value, moved
    pub fn set_greetings(&mut self, v: ::protobuf::RepeatedField<Greeting>) {
        self.greetings = v;
    }

    // Mutable pointer to the field.
    pub fn mut_greetings(&mut self) -> &mut ::protobuf::RepeatedField<Greeting> {
        &mut self.greetings
    }

    // Take field
    pub fn take_greetings(&mut self) -> ::protobuf::RepeatedField<Greeting> {
        ::std::mem::replace(&mut self.greetings, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for GreetingList {
    fn is_initialized(&self) -> bool {
        for v in &self.greetings {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.greetings)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.greetings {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.greetings {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GreetingList {
        GreetingList::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Greeting>>(
                    "greetings",
                    |m: &GreetingList| { &m.greetings },
                    |m: &mut GreetingList| { &mut m.greetings },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<GreetingList>(
                    "GreetingList",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GreetingList {
        static mut instance: ::protobuf::lazy::Lazy<GreetingList> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GreetingList,
        };
        unsafe {
            instance.get(GreetingList::new)
        }
    }
}

impl ::protobuf::Clear for GreetingList {
    fn clear(&mut self) {
        self.greetings.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GreetingList {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GreetingList {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11proto/hello.proto\">\n\x08Greeting\x12\x16\n\x06person\x18\x01\x20\
    \x01(\tR\x06person\x12\x1a\n\x08language\x18\x02\x20\x01(\tR\x08language\
    \"7\n\x0cGreetingList\x12'\n\tgreetings\x18\x01\x20\x03(\x0b2\t.Greeting\
    R\tgreetingsJ\x93\x02\n\x06\x12\x04\0\0\t\x01\n\x08\n\x01\x0c\x12\x03\0\
    \0\x12\n\n\n\x02\x04\0\x12\x04\x02\0\x05\x01\n\n\n\x03\x04\0\x01\x12\x03\
    \x02\x08\x10\n\x0b\n\x04\x04\0\x02\0\x12\x03\x03\x02\x14\n\r\n\x05\x04\0\
    \x02\0\x04\x12\x04\x03\x02\x02\x12\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\
    \x03\x02\x08\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x03\t\x0f\n\x0c\n\x05\
    \x04\0\x02\0\x03\x12\x03\x03\x12\x13\n\x0b\n\x04\x04\0\x02\x01\x12\x03\
    \x04\x02\x16\n\r\n\x05\x04\0\x02\x01\x04\x12\x04\x04\x02\x03\x14\n\x0c\n\
    \x05\x04\0\x02\x01\x05\x12\x03\x04\x02\x08\n\x0c\n\x05\x04\0\x02\x01\x01\
    \x12\x03\x04\t\x11\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x04\x14\x15\n\n\
    \n\x02\x04\x01\x12\x04\x07\0\t\x01\n\n\n\x03\x04\x01\x01\x12\x03\x07\x08\
    \x14\n\x0b\n\x04\x04\x01\x02\0\x12\x03\x08\x02\"\n\x0c\n\x05\x04\x01\x02\
    \0\x04\x12\x03\x08\x02\n\n\x0c\n\x05\x04\x01\x02\0\x06\x12\x03\x08\x0b\
    \x13\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\x08\x14\x1d\n\x0c\n\x05\x04\
    \x01\x02\0\x03\x12\x03\x08\x20!b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
